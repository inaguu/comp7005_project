digraph Client {
  node [shape = circle; fontsize = 15; width = 1; height = 1;];
  edge [fontsize = 15;];
  
  
  // States
  START;
  PARSE_ARGS;
  READ_FILE;
  SOCKET_CONNECTED;
  SYN_SENT;
  WAIT_FOR_SYN_ACK;
  WAIT_FOR_SYN_ACK_2;
  ACK_SENT;
  ESTABLISHED;
  SEND;
  WAIT_FOR_ACK;
  FIN_SENT;
  WAIT_FOR_FIN_ACK;
  WAIT_FOR_FIN_ACK_2;
  FINAL_ACK;
  CLOSED;
  CLEANUP;
  EXIT;
  
  // Transitions
  START -> PARSE_ARGS [label = "parseArgs";];
  PARSE_ARGS -> READ_FILE [label = "readFile";];
  READ_FILE -> SOCKET_CONNECTED [label = "bindSocket";];
  SOCKET_CONNECTED -> SYN_SENT [label = "sendSyn";];
  
  SYN_SENT -> WAIT_FOR_SYN_ACK [label = "hasReceivedPacket";];
  WAIT_FOR_SYN_ACK -> WAIT_FOR_SYN_ACK [label = "timeout, sendSynPacket";];
  WAIT_FOR_SYN_ACK -> ACK_SENT [label = "sendAckPacket";];
  ACK_SENT -> WAIT_FOR_SYN_ACK_2 [label = "hasReceivedPacket";];
  WAIT_FOR_SYN_ACK_2 -> WAIT_FOR_SYN_ACK_2 [label = "received SYN/ACK before timeout, sendlastPacket";];
  WAIT_FOR_SYN_ACK_2 -> ESTABLISHED [label = "timeout";];
  
  ESTABLISHED -> SEND [label = "send";];
  SEND -> WAIT_FOR_ACK [label = "hasReceivedPacket";];
  WAIT_FOR_ACK -> WAIT_FOR_ACK [label = "sendLastPacket";];
  WAIT_FOR_ACK -> SEND [label = "received ack";];
  
  SEND -> FIN_SENT [label = "sendFinPacket";];
  FIN_SENT -> WAIT_FOR_FIN_ACK [label = "hasReceievedPacket";];
  WAIT_FOR_FIN_ACK -> WAIT_FOR_FIN_ACK [label = "timeout sendLastPacket";];
  WAIT_FOR_FIN_ACK -> FINAL_ACK [label = "sendAckPacket";];
  FINAL_ACK -> WAIT_FOR_FIN_ACK_2 [label = "received FIN/ACK before timeout, sendLastPacket";];
  WAIT_FOR_FIN_ACK_2 -> CLOSED [label = "timeout";];
  
  CLOSED -> CLEANUP;
  CLEANUP -> EXIT [label = "cleanup";];
  
  PARSE_ARGS -> EXIT [label = "bad input";];
  READ_FILE -> CLEANUP [label = "read file error";];
  SOCKET_CONNECTED -> EXIT [label = "create socket to proxy error";];
  SEND -> CLEANUP [label = "write error";];
}