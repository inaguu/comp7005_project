digraph Server {
  node [shape = circle; fontsize = 15; width = 1; height = 1;];
  edge [fontsize = 15;];
  
  rankdir = "LR";
  
  // States
  START;
  PARSE_ARGS;
  SOCKET_BINDED;
  RECEIVE;
  SYN_ACK_SENT;
  WAIT_FOR_CONNECTION_ACK;
  WAIT_FOR_TEARDOWN_ACK;
  FIN_ACK_SENT;
  ACK_SENT;
  CLEANUP;
  EXIT;
  
  // Transitions
  START -> PARSE_ARGS [label = "parseArgs";];
  PARSE_ARGS -> SOCKET_BINDED [label = "bindSocket";];
  SOCKET_BINDED -> RECEIVE [label = "receive";];
  RECEIVE -> SYN_ACK_SENT [label = "received syn, sendSynAck";];
  RECEIVE -> FIN_ACK_SENT [label = "received fin, sendFinAck";];
  RECEIVE -> ACK_SENT [label = "received data, sendAck";];
  SYN_ACK_SENT -> WAIT_FOR_CONNECTION_ACK [label = "waitForAck";];
  WAIT_FOR_CONNECTION_ACK -> WAIT_FOR_CONNECTION_ACK [label = "timeout, sendLastPacket";];
  WAIT_FOR_CONNECTION_ACK -> RECEIVE [label = "received ack, receive";];
  FIN_ACK_SENT -> WAIT_FOR_TEARDOWN_ACK [label = "waitForAck";];
  WAIT_FOR_TEARDOWN_ACK -> WAIT_FOR_TEARDOWN_ACK [label = "timeout, sendLastPacket";];
  WAIT_FOR_TEARDOWN_ACK -> RECEIVE [label = "received ack, receive";];
  RECEIVE -> CLEANUP [label = "cleanup";];
  CLEANUP -> EXIT [label = "exit";];
  
  PARSE_ARGS -> EXIT [label = "bad input";];
  SOCKET_BINDED -> EXIT [label = "socker bind error";];
  RECEIVE -> CLEANUP [label = "read error";];
}